from: https://radare.gitbooks.io/radare2book/basic_commands/intro.html

For help on any command, appending a question mark will provide
radare2'2 help documentation for the command!

The general format for a valid command (as explained in the Command Format chapter) looks like this:

[.][times][cmd][~grep][@[@iter]addr!size][|>pipe]


s (tab)	                       Seek to a different place
x [nbytes]   		       Hexdump of nbytes, $b by default
aa	     		       Auto analyze
pdf@fcn(Tab) 		       Disassemble function
f fcn(Tab)   		       List functions
f str(Tab)   		       List strings
fr [flagname] [newname]	       Rename flag
psz [offset]~grep	       Print strings and grep for one
arf [flag]		       Find cross reference for a flag

ii  			       Information on imports
iI  			       Info on binary
ie  			       Display entrypoint
iS  			       Display sections
ir  			       Display relocations
iz  			       List strings (izz, izzz)

/ foo\00		       Search for string ’foo\0’
/b			       Search backwards
//			       Repeat last search
/w foo			       Search for wide string ’f\0o\0o\0’
/wi foo			       Search for wide string ignoring case
/! ff			       Search for first occurrence not matching
/i foo			       Search for string ’foo’ ignoring case
/e /E.F/i		       Match regular expression
/x a1b2c3		       Search for bytes; spaces and uppercase nibbles are allowed, same as /x A1 B2 C3
/x a1..c3		       Search for bytes ignoring some nibbles (auto-generates mask, in this example: ff00ff)
/x a1b2:fff3		       Search for bytes with mask (specify individual bits)
/d 101112		       Search for a deltified sequence of bytes
/!x 00			       Inverse hexa search (find first byte != 0x00)
/c jmp [esp]		       Search for asm code (see search.asmstr)
/a jmp eax		       Assemble opcode and search its bytes
/A     			       Search for AES expanded keys
/r 			       sym.printf Analyze opcode reference an offset
/R 			       Search for ROP gadgets
/P 			       Show offset of previous instruction
/m 			       magicfile   Search for matching magic file
/p 			       patternsize Search for pattern of given size
/z 			       min max     Search for strings of given size
/v[?248] num   		       Look for a asm.bigendian 32bit value

aa 	 		       analyze all
iS 			       show sections 
afl 			       list functions 
ii			       list imports
ie			       list entrypoints
s sym.main		       seek to function 
